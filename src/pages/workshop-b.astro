---
// This presentation goes alongside this guide:
// https://jumbocode.ben.page/cheat-sheets/workshop-b

import PresentationLayout from "../layouts/PresentationLayout.astro";
import Container from "../components/Container.astro";
import Slide from "../components/Slide.astro";
import HStack from "../components/HStack.astro";
import Text from "../components/Text.astro";
import H1 from "../components/H1.astro";
import H2 from "../components/H2.astro";
import Code from "../components/Code.astro";
---

<PresentationLayout title="JumboCode Workshop B">
  <Slide id="intro">
    <H1>JumboCode PM Workshop</H1>
  </Slide>

  <Slide id="functions">
    <H2>JavaScript function syntax</H2>
    <HStack>
      <Container>
        <Code language="js">
          {
            `
function double(number) {
  return number * 2;
}`
          }
        </Code>
        <Text>This is the standard function syntax.</Text>
      </Container>
      <Container>
        <Code language="js">
          {
            `
const double = (number) => {
  return number * 2;
}`
          }
        </Code>
        <Text>We're assigning a function to the constant variable double.</Text>
        <Text>
          These two syntaxes are interchangeable and both widely used.
        </Text>
      </Container>
    </HStack>
  </Slide>

  <Slide id="arrow-functions">
    <H2>Arrow functions</H2>
    <Text>These are equivalent!</Text>
    <Code language="js">
      {
        `
const double = (number) => {
  return number * 2;
}`
      }
    </Code>

    <Code language="js">
      {`const double = (number) => number * 2`}
    </Code>

    <Text>
      (No <code>{`{braces}`}</code> and no <code>return</code> means "return the
      single expression")
    </Text>
  </Slide>

  <Slide id="components">
    <H2>Components</H2>
    <Code language="jsx">
      {
        `
function MyButton() {
  return <button>I'm a button!</button>
}`
      }
    </Code>
    <Code language="jsx">
      {
        `
function App() {
  return (
    <div>
      <MyButton />
    </div>
  )
}`
      }
    </Code>
  </Slide>

  <Slide id="variables">
    <H2>Variables</H2>
    <Code language="jsx">
      {
        `
function Greeting() {
  const name = "Ben"

  return <p>Hello there, {name}</p>
}
// Renders "Hello there, Ben"
    `
      }
    </Code>
  </Slide>

  <Slide id="expressions">
    <H2>Expressions</H2>
    <Code language="jsx">
      {
        `
function Greeting() {
  const name = "Ben"

  return <p>Hello there, {name.toUpperCase()}</p>
}
// Renders "Hello there, BEN"

function RandomNumber() {
  return <p>Your random number is {Math.random()}</p>
}
// Renders "Your random number is 0.27577077597245814"`
      }
    </Code>
  </Slide>

  <Slide id="ternary">
    <H2>Ternary operator</H2>
    <Code language="js">
      {
        `
const icyConditions = true
const carWheelsToEngage = icyConditions ? 4 : 2
// "If \`icyConditions\` is true, then \`carWheelsToEngage\` is 4.
// Otherwise, it's 2.

// Another way to write this without a ternrary operator:
let carWheelsToEngage
if (icyConditions) {
  carWheelsToEngage = 4
} else {
  carWheelsToEngage = 2
}
// As you can see, the ternary operator is more concise.
      `
      }
    </Code>
  </Slide>

  <Slide id="conditionals">
    <H2>Conditionals in React</H2>
    <Code language="jsx">
      {
        `
function Greeting() {
  const niceWeather = false

  return (
    <div>
      <p>Good morning!</p>
      {niceWeather ? (
        <p>Nice weather, isn't it?</p>
      ) : (
        <p>Horrid weather out there, isn't it</p>
      )}
    </div>
  )
}`
      }
    </Code>
  </Slide>

  <Slide id="and">
    <H2>Logical AND in React</H2>
    <Code language="jsx">
      {
        `
function Greeting() {
  const niceWeather = false

  return (
    <div>
      <p>Good morning!</p>

      {!niceWeather && (
        <p>Sorry about the weather!</p>
      )}
    </div>
  )
}`
      }
    </Code>
  </Slide>

  <Slide id="map">
    <H2>Array.map</H2>
    <Code language="js">
      {
        `
const numbers = [1, 2, 3, 4]
const doubleNumbers = numbers.map(function (num) {
    return num * 2
})
// doubleNumbers: [2, 4, 6, 8]

// Using the arrow function syntax, this is equivalent to:
// const doubleNumbers = numbers.map(num => num * 2)
        `
      }
    </Code>
  </Slide>

  <Slide id="loops">
    <H2>Loops in React</H2>
    <Code language="jsx">
      {
        `
function NumberPicker() {
  const numbers = [1, 2, 3, 4]
  return (
      <div>
          <p>Please pick a number:</p>
          {numbers.map(num => (
              <button key={num}>{num}</button>
          )}
      </div>
  )
}
    `
      }
    </Code>
    <Text>Note the <code>key</code>, it's required!</Text>
  </Slide>

  <Slide id="nesting">
    <H2>Nesting</H2>
    <Code language="jsx" scaleFactor={0.55}>
      {
        `
function User() {
    return (
        <p>This is where a user record would go.</p>
    )
}

function HomePage() {
    return (
        <div>
            <p>Look at all our users:</p>
            <User />
            <User />
            <User />
        </div>
    )
}

function UserPage() {
    return (
        <div>
            <p>Here's one user:</p>
            <User />
        </div>
    )
}
    `
      }
    </Code>
  </Slide>

  <Slide id="props">
    <H2>Props in React</H2>
    <Code language="jsx" scaleFactor={0.6}>
      {
        `
function User(props) {
  return (
    <p>
      {props.firstName} {props.lastName}
      {props.admin && (
          <span> (admin)</span>
      )}
    </p>
  )
}

function HomePage() {
  return (
    <div>
      <p>Look at all our users:</p>
      <User firstName="Adam" lastName="Smith" />
      <User firstName="Bella" lastName="Jones" />
      <User firstName="Cynthia" lastName="Miller" admin={true} />
    </div>
  )
}
  `
      }
    </Code>
    <Code language="js" scaleFactor={0.6}>
      {
        `
props = { firstName: "Cynthia", lastName: "Miller", admin: true }
    `
      }
    </Code>
  </Slide>

  <Slide id="destructuring">
    <H2>Destructuring props</H2>

    <Code language="jsx">
      {
        `
// "Destructuring" the props into independent variables allows us
// to write "firstName" instead of "props.firstName".
function User({ firstName, lastName, admin }) {
  return (
    <p>
      {firstName} {lastName}
      {admin && (
          <span> (admin)</span>
      )}
    </p>
  )
}
    `
      }
    </Code>
  </Slide>
</PresentationLayout>
