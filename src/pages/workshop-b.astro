---
// This presentation goes alongside this guide:
// https://jumbocode.ben.page/cheat-sheets/workshop-b

import PresentationLayout from "../layouts/PresentationLayout.astro";
import Container from "../components/Container.astro";
import Slide from "../components/Slide.astro";
import HStack from "../components/HStack.astro";
import Text from "../components/Text.astro";
import H1 from "../components/H1.astro";
import H2 from "../components/H2.astro";
import Code from "../components/Code.astro";
---

<PresentationLayout title="JumboCode Workshop B">
  <Slide id="intro">
    <H1>JumboCode PM Workshop</H1>
  </Slide>

  <Slide id="functions">
    <H2>JavaScript function syntax</H2>
    <HStack>
      <Container>
        <Code language="js">
          {
            `
function double(number) {
  return number * 2;
}`
          }
        </Code>
        <Text>This is the standard function syntax.</Text>
      </Container>
      <Container>
        <Code language="js">
          {
            `
const double = (number) => {
  return number * 2;
}`
          }
        </Code>
        <Text>We're assigning a function to the constant variable double.</Text>
        <Text>
          These two syntaxes are interchangeable and both widely used.
        </Text>
      </Container>
    </HStack>
  </Slide>

  <Slide id="arrow-functions">
    <H2>Arrow functions</H2>
    <Text>These are equivalent!</Text>
    <Code language="js">
      {
        `
const double = (number) => {
  return number * 2;
}`
      }
    </Code>

    <Code language="js">
      {`const double = (number) => number * 2`}
    </Code>

    <Text>
      (No <code>{`{braces}`}</code> and no <code>return</code> means "return the
      single expression")
    </Text>
  </Slide>

  <Slide id="components">
    <H2>Components</H2>
    <Code language="js">
      {
        `
function MyButton() {
  return (
    <button>I'm a button!</button>
  )
}`
      }
    </Code>
    <Code language="js">
      {
        `
function App() {
  return (
    <div>
      <MyButton />
    </div>
  )
}`
      }
    </Code>
  </Slide>

  <Slide id="variables">
    <H2>Variables</H2>
    <Code language="js">
      {
        `
function Greeting() {
  const name = "Ben"

  return <p>Hello there, {name}</p>
}
// Renders "Hello there, Ben"
    `
      }
    </Code>
  </Slide>

  <Slide id="expressions">
    <H2>Expressions</H2>
    <Code language="js">
      {
        `
function Greeting() {
  const name = "Ben"

  return <p>Hello there, {name.toUpperCase()}</p>
}
// Renders "Hello there, BEN"

function RandomNumber() {
  return <p>Your random number is {Math.random()}</p>
}
// Renders "Your random number is 0.27577077597245814"`
      }
    </Code>
  </Slide>

  <Slide id="ternary">
    <H2>Ternary operator</H2>
    <Code language="js">
      {
        `
const icyConditions = true
const carWheelsToEngage = icyConditions ? 4 : 2
// "If \`icyConditions\` is true, then \`carWheelsToEngage\` is 4. Otherwise, it's 2.

// Another way to write this without a ternrary operator:
let carWheelsToEngage
if (icyConditions) {
  carWheelsToEngage = 4
} else {
  carWheelsToEngage = 2
}
// As you can see, the ternary operator is more concise.
      `
      }
    </Code>
  </Slide>

  <Slide id="conditionals">
    <H2>Conditionals in React</H2>
    <Code language="js">
      {
        `
function Greeting() {
  const niceWeather = false

  return (
    <div>
      <p>Good morning!</p>
      {niceWeather ? (
        <p>Nice weather, isn't it?</p>
      ) : (
        <p>Horrid weather out there, isn't it</p>
      )}
    </div>
  )
}`
      }
    </Code>
  </Slide>

  <Slide id="and">
    <H2>Logical AND in React</H2>
    <Code language="js">
      {
        `
function Greeting() {
  const niceWeather = false

  return (
    <div>
      <p>Good morning!</p>

      {!niceWeather && (
        <p>Sorry about the weather!</p>
      )}
    </div>
  )
}`
      }
    </Code>
  </Slide>
</PresentationLayout>
